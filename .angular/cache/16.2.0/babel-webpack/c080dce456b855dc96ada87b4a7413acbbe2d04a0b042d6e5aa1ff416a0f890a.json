{"ast":null,"code":"var _class;\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.serverUrl = `http://localhost:8000`;\n  }\n  //      GET ALL CONTACTS\n  getAllContacts() {\n    let dataURL = `${this.serverUrl}/contacts`;\n    return this.httpClient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  //      GET SINGLE CONTACT\n  getContact(contactId) {\n    let dataURL = `${this.serverUrl}/contacts/${contactId}`;\n    return this.httpClient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  //      CREATE A CONTACT\n  createContact(contact) {\n    let dataURL = `${this.serverUrl}/contacts`;\n    return this.httpClient.post(dataURL, contact).pipe(catchError(this.handleError));\n  }\n  //      UPDATE A CONTACT\n  updateContact(contact, contactId) {\n    let dataURL = `${this.serverUrl}/contacts/${contactId}`;\n    return this.httpClient.put(dataURL, contact).pipe(catchError(this.handleError));\n  }\n  //      DELETE A CONTACT\n  deleteContact(contactId) {\n    let dataURL = `${this.serverUrl}/contacts/${contactId}`;\n    return this.httpClient.delete(dataURL).pipe(catchError(this.handleError));\n  }\n  //      GET ALL GROUPS\n  getAllGroups() {\n    let dataURL = `${this.serverUrl}/groups`;\n    return this.httpClient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  //      GET SINGLE GROUP\n  getGroup(contact) {\n    let dataURL = `${this.serverUrl}/groups/${contact.groupId}`;\n    return this.httpClient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  //      ERROR Handling\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      //      client-side error\n      errorMessage = `Error : ${error.error.message}`;\n    } else {\n      //       server-side error\n      errorMessage = `Status : ${error.status} \\n Message: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\n_class = ContactService;\n_class.ɵfac = function ContactService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","throwError","ContactService","constructor","httpClient","serverUrl","getAllContacts","dataURL","get","pipe","handleError","getContact","contactId","createContact","contact","post","updateContact","put","deleteContact","delete","getAllGroups","getGroup","groupId","error","errorMessage","ErrorEvent","message","status","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/laila/Documents/Documentos - MacBook Pro de LAILA/DESARROLLO WEB/FRAMEWORKS/angular_todo/angular-crud/src/app/services/contact.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { IContact } from '../models/IContact';\nimport { IGroup } from '../models/IGroup';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  private serverUrl: string = `http://localhost:8000`;\n\n  constructor(private httpClient: HttpClient) {}\n  //      GET ALL CONTACTS\n  public getAllContacts(): Observable<IContact[]> {\n    let dataURL: string = `${this.serverUrl}/contacts`;\n    return this.httpClient\n      .get<IContact[]>(dataURL)\n      .pipe(catchError(this.handleError));\n  }\n\n  //      GET SINGLE CONTACT\n  public getContact(contactId :string):Observable<IContact>{\n    let dataURL : string = `${this.serverUrl}/contacts/${contactId}`;\n    return  this.httpClient.get<IContact>(dataURL).pipe(catchError(this.handleError));\n  }\n\n  //      CREATE A CONTACT\n  public createContact(contact : IContact):Observable<IContact>{\n    let dataURL : string=`${this.serverUrl}/contacts` ;\n    return this.httpClient.post<IContact>(dataURL, contact).pipe(catchError(this.handleError));\n\n  }\n\n  //      UPDATE A CONTACT\n  public updateContact(contact : IContact, contactId : string):Observable<IContact>{\n    let dataURL : string=`${this.serverUrl}/contacts/${contactId}` ;\n    return this.httpClient.put<IContact>(dataURL, contact).pipe(catchError(this.handleError));\n\n  }\n\n  //      DELETE A CONTACT\n  public deleteContact(contactId : string):Observable<{}>{\n    let dataURL : string=`${this.serverUrl}/contacts/${contactId}` ;\n    return this.httpClient.delete<{}>(dataURL).pipe(catchError(this.handleError));\n\n  }\n\n  //      GET ALL GROUPS\n  public getAllGroups(): Observable<IGroup[]>{\n    let dataURL: string = `${this.serverUrl}/groups`;\n    return this.httpClient.get<IGroup[]>(dataURL).pipe(catchError(this.handleError));\n  }\n\n  //      GET SINGLE GROUP\n  public getGroup(contact : IContact):Observable<IGroup>{\n    let dataURL : string = `${this.serverUrl}/groups/${contact.groupId}`;\n    return  this.httpClient.get<IGroup>(dataURL).pipe(catchError(this.handleError));\n  }\n\n  //      ERROR Handling\n\n  public handleError(error: HttpErrorResponse) {\n    let errorMessage: string = '';\n    if (error.error instanceof ErrorEvent) {\n      //      client-side error\n      errorMessage = `Error : ${error.error.message}`;\n    } else {\n      //       server-side error\n      errorMessage = `Status : ${error.status} \\n Message: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\n"],"mappings":";AAEA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAOzD,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,SAAS,GAAW,uBAAuB;EAEN;EAC7C;EACOC,cAAcA,CAAA;IACnB,IAAIC,OAAO,GAAW,GAAG,IAAI,CAACF,SAAS,WAAW;IAClD,OAAO,IAAI,CAACD,UAAU,CACnBI,GAAG,CAAaD,OAAO,CAAC,CACxBE,IAAI,CAACT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC;EACvC;EAEA;EACOC,UAAUA,CAACC,SAAiB;IACjC,IAAIL,OAAO,GAAY,GAAG,IAAI,CAACF,SAAS,aAAaO,SAAS,EAAE;IAChE,OAAQ,IAAI,CAACR,UAAU,CAACI,GAAG,CAAWD,OAAO,CAAC,CAACE,IAAI,CAACT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC;EACnF;EAEA;EACOG,aAAaA,CAACC,OAAkB;IACrC,IAAIP,OAAO,GAAU,GAAG,IAAI,CAACF,SAAS,WAAW;IACjD,OAAO,IAAI,CAACD,UAAU,CAACW,IAAI,CAAWR,OAAO,EAAEO,OAAO,CAAC,CAACL,IAAI,CAACT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC;EAE5F;EAEA;EACOM,aAAaA,CAACF,OAAkB,EAAEF,SAAkB;IACzD,IAAIL,OAAO,GAAU,GAAG,IAAI,CAACF,SAAS,aAAaO,SAAS,EAAE;IAC9D,OAAO,IAAI,CAACR,UAAU,CAACa,GAAG,CAAWV,OAAO,EAAEO,OAAO,CAAC,CAACL,IAAI,CAACT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC;EAE3F;EAEA;EACOQ,aAAaA,CAACN,SAAkB;IACrC,IAAIL,OAAO,GAAU,GAAG,IAAI,CAACF,SAAS,aAAaO,SAAS,EAAE;IAC9D,OAAO,IAAI,CAACR,UAAU,CAACe,MAAM,CAAKZ,OAAO,CAAC,CAACE,IAAI,CAACT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC;EAE/E;EAEA;EACOU,YAAYA,CAAA;IACjB,IAAIb,OAAO,GAAW,GAAG,IAAI,CAACF,SAAS,SAAS;IAChD,OAAO,IAAI,CAACD,UAAU,CAACI,GAAG,CAAWD,OAAO,CAAC,CAACE,IAAI,CAACT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC;EAClF;EAEA;EACOW,QAAQA,CAACP,OAAkB;IAChC,IAAIP,OAAO,GAAY,GAAG,IAAI,CAACF,SAAS,WAAWS,OAAO,CAACQ,OAAO,EAAE;IACpE,OAAQ,IAAI,CAAClB,UAAU,CAACI,GAAG,CAASD,OAAO,CAAC,CAACE,IAAI,CAACT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC;EACjF;EAEA;EAEOA,WAAWA,CAACa,KAAwB;IACzC,IAAIC,YAAY,GAAW,EAAE;IAC7B,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,WAAWD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAChD,MAAM;MACL;MACAF,YAAY,GAAG,YAAYD,KAAK,CAACI,MAAM,gBAAgBJ,KAAK,CAACG,OAAO,EAAE;;IAExE,OAAOzB,UAAU,CAACuB,YAAY,CAAC;EACjC;;SA/DWtB,cAAc;;mBAAdA,MAAc,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAd7B,MAAc;EAAA8B,OAAA,EAAd9B,MAAc,CAAA+B,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}